 #include <PZEM004Tv30.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
LiquidCrystal_I2C lcd(0x27, 16, 2);
#if !defined(PZEM_RX_PIN) && !defined(PZEM_TX_PIN)
#define PZEM_RX_PIN 16
#define PZEM_TX_PIN 17
#endif

#if !defined(PZEM_SERIAL)
#define PZEM_SERIALSerial
#endif
#if defined(ESP32)
PZEM004Tv30 pzem(PZEM_SERIAL, PZEM_RX_PIN, PZEM_TX_PIN);
#elif defined(ESP8266)
#else
PZEM004Tv30 pzem(PZEM_SERIAL);
#endif
#define WIFI_SSID "AI"
#define WIFI_PASSWORD "123456789"
#define API_KEY "AIzaSyANAWivkdEy8mcB_USTAnX5ZHecvkYP-Xk"
#define DATABASE_URL "https://energy-monitoring-770d3-default-rtdb.firebaseio.com/"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

void setup() {
  Serial.begin(115200);
 // Serial2.begin(9600);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("ok");
    signupOK = true;
  }
  else {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Wire.begin();
  lcd.init();
  lcd.backlight();
}

void loop()
 {
    if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 1000 || sendDataPrevMillis == 0)) 
    {
      sendDataPrevMillis = millis();
       float voltage = pzem.voltage();
       float current = pzem.current();
       float power = pzem.power();
       float energy = pzem.energy();
       float frequency = pzem.frequency();
       float pf = pzem.pf();

      if (Firebase.RTDB.setFloat(&fbdo, "energy/R phase/Capacity",voltage)) 
      {
        Serial.println(voltage);
        Serial.println("--Successfully saved to: ");
        Serial.println(fbdo.dataPath());
        Serial.println(fbdo.dataType());
      }

      else 
        {
          Serial.println("Failed :");
          Serial.print(fbdo.errorReason());
        }
    }
     /* sendDataPrevMillis = millis();
      SonarSensor(trigPin2,echoPin2);
      Serial.println(distance);
      Sensor2 = (float)Percentage;

      if (Firebase.RTDB.setFloat(&fbdo, "bin/bin2/Capacity",Sensor2)) 
      {
        Serial.println(Sensor2);
        Serial.println("--Successfully saved to: ");
        Serial.println(fbdo.dataPath());
        Serial.println(fbdo.dataType());
      }

      else 
        {
          Serial.println("Failed :");
          Serial.print(fbdo.errorReason());
        }
      if (Firebase.RTDB.setFloat(&fbdo, "bin/Latitude",Latitude1)) 
      {
        Serial.println(Latitude);
        Serial.println("--Successfully saved to: ");
        Serial.println(fbdo.dataPath());
        Serial.println(fbdo.dataType());
      }
      else 
        {
          Serial.println("Failed :");
          Serial.print(fbdo.errorReason());
        }
      if (Firebase.RTDB.setFloat(&fbdo, "bin/Longitude",Longitude1)) 
      {
        Serial.println(Longitude);
        Serial.println("--Successfully saved to: ");
        Serial.println(fbdo.dataPath());
        Serial.println(fbdo.dataType());
      }
      else 
        {
          Serial.println("Failed :");
          Serial.print(fbdo.errorReason());
        }*/
    double voltage = pzem.voltage();
    Serial.print("Voltage: ");
    Serial.print(voltage);
    lcd.clear();
    lcd.print("V1=");
    lcd.print(voltage);
  double current = pzem.current();
    Serial.print("Current: ");
    Serial.print(current);
    lcd.print("A1=");
    lcd.print(current);
  double power = pzem.power();
    Serial.print("Power: ");
    Serial.print(power);
    lcd.setCursor(0, 1);
    lcd.print("P1=");
    lcd.print(power);
  double pf = pzem.pf();
    Serial.print("PF: ");
    Serial.println(pf);
    lcd.print("PF1=");
     lcd.print(pf);
     delay(3000);
 }
